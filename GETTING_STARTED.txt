================================================================================
  TurtleBot3 Maze Navigation - GETTING STARTED
================================================================================

Welcome! This guide will get you up and running in 3 simple steps.

STEP 1: BUILD THE PACKAGE
--------------------------
Run the automated build script:

    chmod +x build_and_test.sh
    ./build_and_test.sh

This will:
  âœ“ Check your ROS 2 installation
  âœ“ Build the package
  âœ“ Verify everything works
  âœ“ Make scripts executable

STEP 2: TEST THE SIMULATION
----------------------------
Open a terminal and launch the maze:

    cd ~/turtlebot3_ws
    source install/setup.bash
    export TURTLEBOT3_MODEL=burger
    ros2 launch turtlebot3_maze_navigation gazebo_maze.launch.py

You should see:
  âœ“ Gazebo window with 6x6 maze
  âœ“ TurtleBot3 robot at top-left corner

STEP 3: TEST MANUAL CONTROL
----------------------------
Open another terminal and test driving:

    cd ~/turtlebot3_ws
    source install/setup.bash
    ros2 run turtlebot3_teleop teleop_keyboard

Press 'w' to move forward, 's' to stop.
If the robot moves, everything is working!

NEXT STEPS
----------
Once basic testing works, follow these guides:

  ðŸ“– QUICK_START.md  - Fast-track guide (15-20 mins to first navigation)
  ðŸ“– README.md       - Complete detailed guide
  ðŸ“‹ PROJECT_CHECKLIST.md - Track your progress

WHAT'S INCLUDED
---------------
This package includes everything you need:

  âœ“ Maze world file (6x6 grid, 3m x 3m)
  âœ“ Launch files for Gazebo, SLAM, Navigation
  âœ“ Cartographer configuration for mapping
  âœ“ Nav2 configuration for autonomous navigation
  âœ“ Deep Q-Learning implementation
  âœ“ Performance tracking tools
  âœ“ Complete documentation
  âœ“ Report template

FILE STRUCTURE
--------------
turtlebot3_maze_navigation/
  â”œâ”€â”€ launch/              Launch files for each phase
  â”œâ”€â”€ worlds/              Maze world file (SDF format)
  â”œâ”€â”€ config/              Configuration files (Nav2, Cartographer, RViz)
  â”œâ”€â”€ maps/                Generated maps from SLAM (you'll create these)
  â”œâ”€â”€ scripts/             Python scripts (DQL, performance tracking)
  â”œâ”€â”€ README.md            Comprehensive guide
  â”œâ”€â”€ QUICK_START.md       Fast guide
  â”œâ”€â”€ REPORT_TEMPLATE.md   Template for your report
  â””â”€â”€ PROJECT_CHECKLIST.md Progress tracker

TYPICAL WORKFLOW
----------------
1. Build package (5 mins)
2. Test basic simulation (5 mins)
3. Create map with SLAM (15-20 mins)
4. Test Nav2 navigation (15 mins)
5. Record performance data (30 mins)
6. (Optional) Train DQL (several hours)
7. Write report (8-12 hours)

QUICK COMMANDS REFERENCE
-------------------------

# Launch Gazebo with maze
ros2 launch turtlebot3_maze_navigation gazebo_maze.launch.py

# Launch SLAM mapping
ros2 launch turtlebot3_maze_navigation cartographer.launch.py

# Save map after mapping
cd ~/turtlebot3_ws/src/turtlebot3_maze_navigation/maps
ros2 run nav2_map_server map_saver_cli -f maze_map

# Launch autonomous navigation
ros2 launch turtlebot3_maze_navigation navigation.launch.py

# Launch DQL training
ros2 run turtlebot3_maze_navigation dql_navigator.py

# Track performance
ros2 run turtlebot3_maze_navigation performance_tracker.py

# Test setup
ros2 run turtlebot3_maze_navigation test_setup.py

TROUBLESHOOTING
---------------

Problem: "Package not found"
Solution: cd ~/turtlebot3_ws && colcon build --packages-select turtlebot3_maze_navigation && source install/setup.bash

Problem: Gazebo won't start
Solution: killall gz; ros2 launch turtlebot3_maze_navigation gazebo_maze.launch.py

Problem: Robot falls through floor
Solution: This is a physics issue. Check Z position in launch file (should be 0.01)

Problem: Map not loading
Solution: Verify map files exist in maps/ folder and check path in launch file

HELPFUL TOPICS TO CHECK
-----------------------
ros2 topic list                 # See all topics
ros2 topic echo /scan           # View LiDAR data
ros2 topic echo /odom           # View robot position
ros2 topic echo /map            # View map data
ros2 node list                  # See running nodes

GETTING HELP
------------
  â€¢ Check README.md for detailed explanations
  â€¢ Review code comments in launch files
  â€¢ Use the PROJECT_CHECKLIST.md to track progress
  â€¢ Check ROS 2 docs: https://docs.ros.org/en/jazzy/
  â€¢ Check Nav2 docs: https://navigation.ros.org/
  â€¢ Check TurtleBot3 manual: https://emanual.robotis.com/

FOR YOUR VIVA DEMO
------------------
Make sure you can:
  1. Launch the simulation
  2. Show the generated map
  3. Navigate to 3 different goals
  4. Explain how SLAM works
  5. Explain how A* path planning works
  6. Discuss your results and challenges

IMPORTANT NOTES
---------------
  â€¢ SLAM mapping takes 10-15 minutes - drive slowly and cover all areas
  â€¢ DQL training takes several hours - start early if using this method
  â€¢ Always source your workspace: source ~/turtlebot3_ws/install/setup.bash
  â€¢ Set TURTLEBOT3_MODEL=burger before launching
  â€¢ Take screenshots/videos as you go - you'll need them for the report

TIME ESTIMATES
--------------
  Setup & Build:        2-3 hours
  Maze Testing:         1 hour
  SLAM Mapping:         2-4 hours
  Nav2 Navigation:      3-5 hours
  DQL (optional):       10-20 hours
  Data Collection:      4-6 hours
  Report Writing:       8-12 hours
  -----------------------------------
  TOTAL:                30-50+ hours

Start early and work systematically through the checklist!

================================================================================
Ready to begin? Run: ./build_and_test.sh
================================================================================

